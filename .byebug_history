c
@student.is_disabled == true
@student.is_disabled
 params[:is_disabled] == true
c
full_query = query_array.unshift(query)
c
params[:crb_checked] == "true"
params[:crb_checked] == true
params[:crb_checked]
params[:crb_checked].to_i
params[:crb_checked]
params
c
params[:crb_checked]
params[:crb_checked].to_boolean
params[:crb_checked] == "true"
params[:crb_checked]
params[:crb_checked].boolean
params[:crb_checked].gsub('"','')
params[:crb_checked].to_a
params[:crb_checked]
c
full_query 
params
full_query 
c
params
full_query
c
full_query
c
params
query_array << params[:crb_checked]
query += " crb_checked = ? "
params[:crb_checked].present?
c
full_query 
c
params
c
full_query
c
full_query
@teachers
params
c
full_query = query_array.unshift(query)
c
params
full_query
@teachers
c
@teachers
full_query
params
c
query_array << params[:dbs_checked]
query += " crb_checked = ? "
params[:dbs_checked].present?
count > 0 && params[:dbs_checked].present?
full_query = query_array.unshift(query)
c
full_query = query_array.unshift(query)
c
@teachers = Teacher.where(full_query)
full_query
c
full_query 
c
query_array << params[:dbs_checked]
query += " crb_checked = ? "
 params[:dbs_checked].present?
 count > 0 && params[:dbs_checked].present?
c
params
c
@teachers = Teacher.where(full_query)
full_query
c
 full_query = query_array.unshift(query)
 @teachers = Teacher.where(full_query)
c
params
c
@teachers = Teacher.where(full_query)
c
query_array << "%#{params[:email]}%"
 query += " email like ? "
params[:q][:email_contains] == "contain"
params[:email].present?
 count > 0 && params[:email].present?
c
full_query
@teachers = Teacher.where(full_query)
c
teacher_filter
c
@teachers
c
teacher_filter
params
c
format
format.html
format.js
teacher_filter
c
format.html
format.js
c
request.format
c
teacher_filter
request.xhr? && params[:q].present?
params
c
teacher_filter
c
teacher_filter
request.xhr?
request.xhr? && params[:q].present?
c
@teachers = Teacher.where(full_query)
full_query = query_array.unshift(query)
query_array << "%#{params[:name]}%"
 query += " name like ? "
count = count + 1
params[:q][:name_contains] == "contain"
params
c
   20:       query = ""
   19:       query_array = []
count = 0
params[:q].present?
params
c
params
c
@teacher =  Teacher.new
params
c
@levels = LevelsStudent.where(level_id:Level.find_by(name:params[:level_name]).try(:id))
query.empty?
full_query1 = query_array1.unshift(query1)
full_query = query_array.unshift(query)
params
c
student_ids.present?
@ids.present?
@student.collect(&:id)
student_ids.present?
@ids.present?
c
@student
@students
@student
@students = nil
arr.nil?
c
@ids.present? || student_ids.present?
@ids.present? && student_ids.present?
 @ids = @students.collect(&:id)
@ids.present?
student_ids = @student.collect(&:id)
c
params
c
@levels = LevelsStudent.where(level_id:Level.find_by(name:params[:level_name]).try(:id))
params
c
@students = @students.joins(:levels, :LevelsStudent).where(levels: params[:level_name])
@students = Student.where(full_query)
query.empty?
 full_query1 = query_array1.unshift(query1)
full_query = query_array.unshift(query)
params
c
Student.send(params[:commit].downcase)
status_arr.include?(params[:commit])
params
c
Student.send(params[:commit])
c
Student.send(:params[:commit].downcase)
Student.send(:params[:commit])
status_arr.include?(params[:commit])
Student.send(:params[:commit])
status_arr.include?(params[:commit])
status_arr = ['All','Enrolled','Applied','Shortlist','Waitlist']
Student.send(params[:commit].downcase)
params
c
params
c
Student.send("abc")
Student.send(abc)
abc = params[:commit].downcase
params[:commit].downcase
params[:commit]
Student.send(params[:commit].downcase)
Student.send(params[:commit])
 status_arr.include?(params[:commit])
if status_arr.include?(params[:commit])
status_arr = ['All','Enrolled','Applied','Shortlist','Waitlist']
params
c
student.type.fee
student.type
student.fee
c
cc
c
Type.find(student.type_id).name
Type.find(student.type_id)
student.type_id
student
c
@types = Type.where(full_query)
full_query = query_array.unshift(query)
c
full_query = query_array.unshift(query)
c
query_array << params[:fee]
query += " fee = ? "
Type.check_string(params[:fee])
params[:q][:fee_contains] == "equal"
params[:fee].present?
count > 0 && params[:fee].present?
c
 @types = Type.where(full_query)
full_query = query_array.unshift(query)
c
full_query = query_array.unshift(query)
c
params
count > 0 && params[:fee].present?
c
params
c
f.object.status == "Enrolled"
f.object.status
f.object
f
Type.pluck(:name,:id)
c
params[:id]
params
c
params
c
@type = Type.new
params
c
@student.parent.present?
@student.parent
